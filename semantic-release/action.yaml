name: "Action For Semantic Release"
description: "GitHub Action for Semantic Release"
author: "open-turo"
branding:
  icon: "package"
  color: "orange"
inputs:
  github-token:
    required: true
    description: GitHub token that can checkout the repository as well as create tags/releases against it. e.g. 'secrets.GITHUB_TOKEN'
    default: ${{ github.token }}
  branches:
    required: false
    description: "Override the branches where semantic release runs on. Accepts a string or a JSON object."
  ci:
    required: false
    description: "Set to false to skip Continuous Integration environment verifications"
  dry-run:
    required: false
    description: "Whether to run semantic release in `dry-run` mode. It will override the dryRun attribute in your configuration file"
  extra-plugins:
    required: false
    description: "Extra plugins for pre-install. You can also specify specifying version range for the extra plugins if you prefer."
  semantic-version:
    required: false
    description: "Specify what version of semantic release to use"
  override-github-ref-name:
    required: false
    description: "Allow for override of github ref-name for running pull and repository dispatch triggered events"
outputs:
  new-release-published:
    description: "Whether a new release was published"
    value: ${{ steps.semantic-release.outputs.new-release-published }}
  new-release-notes:
    description: "The release notes for the new release if any"
    value: ${{ steps.semantic-release.outputs.new-release-notes }}
  new-release-version:
    description: "Version of the new release"
    value: ${{ steps.semantic-release.outputs.new-release-version }}
  new-release-major-version:
    description: "Major version of the new release"
    value: ${{ steps.semantic-release.outputs.new-release-major-version }}
  new-release-minor-version:
    description: "Minor version of the new release"
    value: ${{ steps.semantic-release.outputs.new-release-minor-version }}
  new-release-patch-version:
    description: "Patch version of the new release"
    value: ${{ steps.semantic-release.outputs.new-release-patch-version }}
  new-release-type:
    description: "Type of the new release: 'prerelease' | 'prepatch' | 'patch' | 'preminor' | 'minor' | 'premajor' | 'major'"
    value: ${{ steps.semantic-release.outputs.new-release-type }}
  last-release-version:
    description: "Version of the last release"
    value: ${{ steps.semantic-release.outputs.last-release-version }}
  last-release-major-version:
    description: "Major version of the last release"
    value: ${{ steps.semantic-release.outputs.last-release-major-version }}

runs:
  using: composite
  steps:
    - name: Setup tools
      uses: actions/setup-node@v3
      with:
        node-version: "20"
    - name: Semantic-release
      id: semantic-release
      run: |
        if [[ ! -z "${{ inputs.override-github-ref-name }}" ]]; then

          # if the override-github-ref-name is main or master, error
          if [[ "${{ inputs.override-github-ref-name }}" == "main" || "${{ inputs.override-github-ref-name }}" == "master" ]]; then
            echo "::error::Cannot override to main or master branch"
            exit 1
          fi
          echo "::notice::Overriding github ref to ${{ github.ref }}"
          export GITHUB_REF=refs/heads/${{ inputs.override-github-ref-name }}
          export GITHUB_REF_NAME=${{ inputs.override-github-ref-name }}
          export GITHUB_SHA=$(git rev-parse HEAD)
          export GITHUB_REF_TYPE=branch
          export GITHUB_REF_PROTECTED="false"
        fi

        echo "::group::bash environment"
        set
        echo "::endgroup::"

        node ${{ github.action_path }}/dist/index.js
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        SEMANTIC_ACTION_DRY_RUN: ${{ inputs.dry-run }}
        SEMANTIC_ACTION_EXTRA_PLUGINS: ${{ inputs.extra-plugins }}
        SEMANTIC_ACTION_BRANCHES: ${{ inputs.branches }}
        SEMANTIC_ACTION_SEMANTIC_VERSION: ${{ inputs.semantic-version }}
