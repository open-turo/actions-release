name: GitHub Action Release Notes Preview
description: |-
  Github action that lints release notes. It generates release notes using semantic-release and posts them as a comment in
  a pull request with the changes that would be included in the next version of the codebase if the pull request is
  merged. It also will fail if there are breaking changes and no `v<major-version>.md` doc has been created.
inputs:
  checkout-repo:
    required: false
    description: Perform checkout as first step of action
    default: "true"
  github-token:
    required: true
    description: GitHub token that can checkout the repository as well as create tags/releases against it. e.g. 'secrets.GITHUB_TOKEN'
    default: ${{ github.token }}
  enforce-breaking-changes-docs:
    required: false
    description: Ensure that an appropriate `v<major-version>.md` doc has been created if there are breaking changes in the PR.
    default: "true"
  extra-plugins:
    required: false
    description: Extra plugins for pre-install. You can also specify specifying version range for the extra plugins if you prefer.  Defaults to install @open-turo/semantic-release-config.
    default: |
      @open-turo/semantic-release-config@6.1.2
  semantic-version:
    required: false
    description: Specify what version of semantic release to use
runs:
  using: composite
  steps:
    - name: Set vars
      id: source-vars
      shell: bash
      env:
        event_name: ${{ github.event_name }}
        pull_request_ref_name: ${{ github.event.pull_request.head.ref }}
      run: |
        echo "event_name=$event_name"

        if [ "$event_name" == "pull_request" ]; then
          branch=$pull_request_ref_name
        else
          echo "::error::Unsupported event type '$event_name'"
          exit 1
        fi

        echo "branch=$branch"
        echo "branch=$branch" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v4
      if: inputs.checkout-repo == 'true'
      with:
        fetch-depth: 0
        ref: ${{ steps.source-vars.outputs.branch }}

    - name: Setup tools
      uses: open-turo/action-setup-tools@v2
      with:
        node: 20.12.1
    - name: Generate release notes
      id: release-notes-preview
      uses: open-turo/actions-release/semantic-release@v4
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        branches: ${{ steps.source-vars.outputs.branch }}
        dry-run: true
        extra-plugins: ${{ inputs.extra-plugins }}
        semantic-version: ${{ inputs.semantic-version }}
        override-github-ref-name: ${{ steps.source-vars.outputs.branch }}

    # Add release notes preview to PR
    - name: Check for release notes comment
      uses: peter-evans/find-comment@v3
      id: fc-release-notes
      if: github.event.pull_request.number != ''
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: "github-actions[bot]"
        body-includes: "<!-- release notes preview comment -->"
    - name: Delete previous release note
      if: steps.fc-release-notes.outputs.comment-id != ''
      uses: winterjung/comment@v1
      with:
        type: delete
        comment_id: ${{ steps.fc-release-notes.outputs.comment-id }}
        token: ${{ inputs.github-token }}
    - name: Comment release notes preview
      id: release-notes-preview-comment
      uses: peter-evans/create-or-update-comment@v4
      if: steps.release-notes-preview.outputs.new-release-notes != '' && github.event.pull_request.number != ''
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Release notes preview
          Below is a preview of the release notes if your PR gets merged.

          ---
          <!-- release notes preview comment -->
          ${{ steps.release-notes-preview.outputs.new-release-notes }}
    - name: Create no release created
      uses: peter-evans/create-or-update-comment@v4
      if: steps.release-notes-preview.outputs.new-release-notes == '' && github.event.pull_request.number != ''
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          <!-- release notes preview comment -->
          ## Release notes preview
          **_No_ new release will be created.**

          If you are expecting a release, you will need to either fix a bug or add a feature.
          Chores, CI, docs, refactoring, style and other changes will not trigger a release.

    # Ensure that a breaking changes doc has been created
    - name: Check for breaking changes comment
      uses: peter-evans/find-comment@v3
      id: fc-breaking-changes
      if: github.event.pull_request.number != ''
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: "github-actions[bot]"
        body-includes: "<!-- breaking changes comment -->"
    - name: Delete previous breaking changes comment
      if: steps.fc-breaking-changes.outputs.comment-id != ''
      uses: winterjung/comment@v1
      with:
        type: delete
        comment_id: ${{ steps.fc-breaking-changes.outputs.comment-id }}
        token: ${{ inputs.github-token }}
    - name: "Check File Existence"
      id: breaking-changes-file
      if: inputs.enforce-breaking-changes-docs == 'true' && github.event.pull_request.number != ''
      shell: bash
      run: |
        echo "Checking for breaking changes file"
        set -e
        breaking_changes_file_missing=false
        breaking_changes_file_default_content=false
        breaking_changes_file_exists=false
        if [ "${{ steps.release-notes-preview.outputs.new-release-published }}" = "true" ]; then
          echo "new release published"
          if [ "${{ steps.release-notes-preview.outputs.new-release-type }}" = "major" ]; then
            echo "braking change"
            file_path="docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md"
            # Check if the file exists
            if [ -e "$file_path" ]; then
              echo "breaking change doc $file_path exists."
              expected_contents="Elaborate and add context to help the developer understand the changes"

              breaking_changes_file_exists=true
              if grep -Fq "$expected_contents" "$file_path"; then
                echo "The file $file_path contains the default contents."
                breaking_changes_file_default_content=true
              fi
            else
              echo "breaking change doc $file_path does not exist."
              breaking_changes_file_missing=true
            fi
          fi
        fi
        echo "Output: "
        echo "   required=${breaking_changes_file_missing}"
        echo "   default_content=${breaking_changes_file_default_content}"
        echo "   exists=${breaking_changes_file_exists}"
        echo "required=${breaking_changes_file_missing}" >> $GITHUB_OUTPUT
        echo "default_content=${breaking_changes_file_default_content}" >> $GITHUB_OUTPUT
        echo "exists=${breaking_changes_file_exists}" >> $GITHUB_OUTPUT

    - name: Comment missing breaking changes doc
      uses: peter-evans/create-or-update-comment@v4
      if: steps.breaking-changes-file.outputs.required == 'true'
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Error: missing breaking changes documentation
          This pull request contains breaking changes, but no documentation has been added to `docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md`.

          <details>
            <summary>Instructions for creating breaking changes document:</summary>

          ```shell
          mkdir -p docs/breaking-changes
          cat <<EOF > docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md
          # Breaking changes in v${{ steps.release-notes-preview.outputs.new-release-major-version }}

          [//]: # "Brief description of current major version release scope. (remove comment after updating)"

          ## Description of changes

          [//]: # "Elaborate and add context to help the developer understand the changes. (remove comment after updating)"

          ## Upgrade instructions

          [//]: # "Required and suggested prerequisites, example code, etc. (remove comment after updating)"

          EOF
          ```
          </details>

          ---
          <!-- breaking changes comment -->
    - name: Comment missing breaking changes doc
      uses: peter-evans/create-or-update-comment@v4
      if: steps.breaking-changes-file.outputs.default_content == 'true'
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Error: breaking changes documentation must be updated
          This pull request contains breaking changes, `docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md` contains the default content.

          Please update the content and push changes.

          ---
          <!-- breaking changes comment -->

    - name: Get breaking changes doc
      uses: mathiasvr/command-output@v2.0.0
      id: breaking-changes-file-contents
      if: steps.breaking-changes-file.outputs.exists == 'true'
      with:
        run: cat docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md

    - name: Append breaking changes doc to release notes preview
      uses: peter-evans/create-or-update-comment@v4
      if: steps.breaking-changes-file.outputs.exists == 'true'
      with:
        comment-id: ${{ steps.release-notes-preview-comment.outputs.comment-id }}
        body: |
          ---
          ## Breaking changes file `docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md`
          ${{ steps.breaking-changes-file-contents.outputs.stdout }}
          ---

    - name: Fail if we are checking for the breaking changes doc and it is missing
      if: steps.breaking-changes-file.outputs.required == 'true'
      shell: bash
      run: |
        echo "::error::Breaking changes document is missing. Expected: 'docs/breaking-changes/v${{ steps.release-notes-preview.outputs.new-release-major-version }}.md'" && exit 1
    - name: Fail if we are checking for the breaking changes doc and it has default content
      if: steps.breaking-changes-file.outputs.default_content == 'true'
      shell: bash
      run: |
        echo "::error::Breaking changes document has default content." && exit 1
